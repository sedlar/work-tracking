openapi: "3.0.2"
info:
  version: 1.0.0
  title: Work tracking
  description: A service to track work

servers:
  - url: /v1

security:
  - basicAuth: []

paths:
  /projects/{project_id}:
    get:
      description: |
        Get info about project
      operationId: wt.http_api.projects.get_project
      parameters:
        - $ref: '#/components/parameters/pathProjectId'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatsResponse'
        '404':
          description: Project doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: |
        Create or update project
      operationId: wt.http_api.projects.put_project
      parameters:
        - $ref: '#/components/parameters/pathProjectId'
      requestBody:
        description: Project to put
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        '200':
          description: Project was updated
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Project doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: |
        Delete project
      operationId: wt.http_api.projects.delete_project
      parameters:
        - $ref: '#/components/parameters/pathProjectId'
      responses:
        '200':
          description: Project was deleted
        '401':
          description: Authorization needed
        '404':
          description: Project doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects:
    get:
      description: |
        Get projects
      operationId: wt.http_api.projects.get_projects
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsResponse'
        '401':
          description: Authorization needed
        '404':
          description: Project doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{project_id}/deliverables:
    get:
      description: |
        Get project deliverables
      operationId: wt.http_api.projects.get_project_deliverables
      parameters:
        - $ref: '#/components/parameters/pathProjectId'
        - $ref: '#/components/parameters/queryRelatedObjectId'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDeliverablesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Project doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: |
        Create new deliverable under given project
      operationId: wt.http_api.projects.post_deliverable
      parameters:
        - $ref: '#/components/parameters/pathProjectId'
      requestBody:
        description: Deliverable to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliverableRequest'
      responses:
        '201':
          description: Deliverable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIdObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Deliverable doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{project_id}/issues:
    get:
      description: |
        Get issues of project
      operationId: wt.http_api.projects.get_project_issues
      parameters:
        - $ref: '#/components/parameters/pathProjectId'
        - $ref: '#/components/parameters/queryRelatedObjectId'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectIssuesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Project doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: |
        Create new issue under given project
      operationId: wt.http_api.projects.post_issue
      parameters:
        - $ref: '#/components/parameters/pathProjectId'
      requestBody:
        description: Issue to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueRequest'
      responses:
        '201':
          description: Issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIdObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Issue doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /deliverables/{deliverable_id}:
    get:
      description: |
        Get info about deliverable
      operationId: wt.http_api.deliverables.get_deliverable
      parameters:
        - $ref: '#/components/parameters/pathDeliverableId'
      responses:
        '200':
          description: Deliverable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliverableStatsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Deliverable doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: |
        Update deliverable (not create)
      operationId: wt.http_api.deliverables.put_deliverable
      parameters:
        - $ref: '#/components/parameters/pathDeliverableId'
      requestBody:
        description: Deliverable to put
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliverableRequest'
      responses:
        '200':
          description: Deliverable was updated
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Deliverable doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: |
        Delete deliverable
      operationId: wt.http_api.deliverables.delete_deliverable
      parameters:
        - $ref: '#/components/parameters/pathDeliverableId'
      responses:
        '200':
          description: Deliverable was deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Deliverable doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /issues/{issue_id}:
    get:
      description: |
        Get info about issue
      operationId: wt.http_api.issues.get_issue
      parameters:
        - $ref: '#/components/parameters/pathIssueId'
      responses:
        '200':
          description: Issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueStatsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Issue doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: |
        Update issue (not create)
      operationId: wt.http_api.issues.put_issue
      parameters:
        - $ref: '#/components/parameters/pathIssueId'
      requestBody:
        description: Issue to put
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueRequest'
      responses:
        '200':
          description: Issue was updated
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Issue doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: |
        Delete issue
      operationId: wt.http_api.issues.delete_issue
      parameters:
        - $ref: '#/components/parameters/pathIssueId'
      responses:
        '200':
          description: Issue was deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Issue doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /timesheets:
    get:
      description: |
        Get timesheets of object
      operationId: wt.http_api.issues.get_issue_timesheets
      parameters:
        - $ref: '#/components/parameters/queryObjectId'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Issue doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: |
        Add new timesheet to object
      operationId: wt.http_api.issues.post_issue_timesheet
      requestBody:
        description: Issue to put
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimesheetRequest'
      responses:
        '201':
          description: Issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleIdObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Issue doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /timesheets/{timesheet_id}:
    delete:
      description: |
        Delete timesheet
      operationId: wt.http_api.timesheets.delete_timesheet
      parameters:
        - $ref: '#/components/parameters/pathTimesheetId'
      responses:
        '200':
          description: Timesheet was deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Timesheet doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /expenditures:
    get:
      description: |
        Get expenditures of object
      operationId: wt.http_api.issues.get_issue_expenditures
      parameters:
        - $ref: '#/components/parameters/queryObjectId'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpendituresResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Issue doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      description: |
        Add new expenditure to object
      operationId: wt.http_api.issues.post_issue_expenditure
      parameters:
        - $ref: '#/components/parameters/pathIssueId'
      requestBody:
        description: Issue to put
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenditureRequest'
      responses:
        '201':
          description: Expenditure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleIdObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Expenditure doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /expenditures/{expenditure_id}:
    delete:
      description: |
        Delete expenditure
      operationId: wt.http_api.expenditures.delete_expenditure
      parameters:
        - $ref: '#/components/parameters/pathExpenditureId'
      responses:
        '200':
          description: Expenditure was deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Expenditure doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /links/{object_id}/{other_object_id}:
    put:
      description: |
        Create link between two objects (symmetric)
      operationId: wt.http_api.links.put_link
      parameters:
        - $ref: '#/components/parameters/pathObjectId'
        - $ref: '#/components/parameters/pathOtherObjectId'
      responses:
        '201':
          description: Link was created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed

    delete:
      description: |
        Delete link between objects (symetric)
      operationId: wt.http_api.links.delete_link
      parameters:
        - $ref: '#/components/parameters/pathObjectId'
        - $ref: '#/components/parameters/pathOtherObjectId'
      responses:
        '200':
          description: Link was deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization needed
        '404':
          description: Link doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    ProjectIssuesResponse:
      type: object
      required:
        - issues
      properties:
        issues:
          type: array
          items:
            $ref: "#/components/schemas/Issue"

    ProjectDeliverablesResponse:
      type: object
      required:
        - deliverables
      properties:
        deliverables:
          type: object
          required:
            - deliverables
          properties:
            deliverables:
              type: array
              items:
                $ref: "#/components/schemas/Deliverable"

    ProjectStatsResponse:
      type: object
      required:
        - project
      properties:
        project:
          $ref: '#/components/schemas/Project'
        stats:
          $ref: '#/components/schemas/Stats'

    DeliverableStatsResponse:
      type: object
      required:
        - deliverable
      properties:
        deliverable:
          $ref: '#/components/schemas/DeliverableWithStats'

    IssueStatsResponse:
      type: object
      required:
        - issue
      properties:
        issue:
          $ref: '#/components/schemas/IssueWithStats'

    TimesheetsResponse:
      type: object
      required:
        - timesheets
      properties:
        timesheets:
          type: array
          items:
            $ref: '#/components/schemas/Timesheet'

    ExpendituresResponse:
      type: object
      required:
        - expenditures
      properties:
        expenditures:
          type: array
          items:
            $ref: '#/components/schemas/Expenditure'
    Stats:
      type: object
      required:
        - progress
        - bilance_duration
        - bilance_cost
      properties:
        progress:
          type: number
          description: Whatever this is
        bilance_duration:
          type: number
          description: burned time - estimated time in hours
        bilance_cost:
          $ref: "#/components/schemas/Money"

    ProjectRequest:
      type: object
      required:
        - project
      properties:
        project:
          $ref: '#/components/schemas/NewProject'

    DeliverableRequest:
      type: object
      required:
        - project
      properties:
        project:
          $ref: '#/components/schemas/NewDeliverable'

    IssueRequest:
      type: object
      required:
        - issue
      properties:
        issue:
          $ref: '#/components/schemas/NewIssue'

    TimesheetRequest:
      type: object
      required:
        - issue
      properties:
        issue:
          $ref: '#/components/schemas/NewTimesheet'

    ExpenditureRequest:
      type: object
      required:
        - issue
      properties:
        issue:
          $ref: '#/components/schemas/NewExpenditure'

    ProjectsResponse:
      type: object
      required:
        - projects
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'

    ProjectIdObject:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/ProjectId'

    ObjectIdObject:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'

    SimpleIdObject:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/SimpleId'

    NewProject:
      type: object
      required:
        - name
        - status
        - date_opened
        - description
        - goals_and_metrics
        - limitations_and_restrictions
        - primary_color
        - secondary_color
        - files
        - hour_rate
      properties:
        name:
          type: string
          example: 'Work tracking'
          maxLength: 128
        status:
          type: string
          enum:
            - pending
            - open
            - completed
            - archived
          description: Project status
        date_opened:
          type: string
          format: date
          example: "2002-10-02T15:00:00.05Z"
          description: Date of opening project
        date_closed:
          type: string
          format: date
          description: Date of closing project
          example: "2002-10-02T15:00:00.05Z"
        deadline:
          type: string
          format: date
          description: Deadline of the project
          example: "2002-10-02T15:00:00.05Z"
        hour_rate:
          $ref: "#/components/schemas/Money"
        description:
          type: string
          description: Description of project
        goals_and_metrics:
          type: string
          description: Goals and metrics
        limitations_and_restrictions:
          type: string
          description: Limitations_and_descriptions
        files:
          $ref: "#/components/schemas/Files"
        primary_color:
          $ref: "#/components/schemas/Color"
        secondary_color:
          $ref: "#/components/schemas/Color"

    Files:
      type: array
      items:
        type: string
        format: uri
        maxLength: 2048

    Links:
      type: array
      items:
        type: object
        required:
          - title
          - description
          - link
        properties:
          title:
            type: string
            maxLength: 128
            description: Title of the linked page
          description:
            type: string
            maxLength: 4096
            description: Descrition of the linked page
          link:
            format: uri
            maxLength: 2048

    NewDeliverable:
      type: object
      required:
        - name
        - status
        - date_opened
        - description
      properties:
        name:
          type: string
          example: 'First deliverable'
          maxLength: 128
        status:
          type: string
          enum:
            - pending
            - open
            - completed
            - archived
          description: Deliverable status
        date_opened:
          type: string
          format: date
          description: Date of opening deliverable
          example: "2002-10-02T15:00:00.05Z"
        date_closed:
          type: string
          format: date
          description: Date of closing deliverable
          example: "2002-10-02T15:00:00.05Z"
        deadline:
          type: string
          format: date
          description: Deadline of the deliverable
          example: "2002-10-02T15:00:00.05Z"
        description:
          type: string
          description: Description of deliverable

    NewIssue:
      type: object
      required:
        - name
        - status
        - date_opened
        - description
      properties:
        name:
          type: string
          example: 'First issue'
          maxLength: 100
        status:
          type: string
          enum:
            - new
            - open
            - review
            - waiting
            - done
            - invalid
            - duplicate
            - wontfix
            - archived
          description: Issue status
          default: new
        type:
          type: string
          enum:
            - task
            - improvement
            - feature
            - bug
            - education
          description: Issue type
          default: task
        priority:
          type: string
          enum:
            - blocker
            - critical
            - major
            - minor
            - trivial
          description: Issue priority
          default: minor
        date_opened:
          type: string
          format: date
          description: Date of opening deliverable
          example: "2002-10-02T15:00:00.05Z"
        date_closed:
          type: string
          format: date
          description: Date of closing deliverable
          example: "2002-10-02T15:00:00.05Z"
        deadline:
          type: string
          format: date
          description: Deadline of the deliverable
          example: "2002-10-02T15:00:00.05Z"
        estimated_duration:
          type: number
          description: Estimated duration in hours
        hour_rate:
          $ref: "#/components/schemas/Money"
        description:
          type: string
          description: Description of deliverable
        files:
          $ref: "#/components/schemas/Files"
        links:
          $ref: "#/components/schemas/Links"
        external_type:
          type: string
          maxLength: 200
          description: External type
        tags:
          type: array
          items:
            type: string
            description: Tag
            maxLength: 50

    BaseTimesheet:
      type: object
      required:
        - name
        - date_opened
        - duration
      properties:
        name:
          type: string
          example: 'Timesheet'
          maxLength: 100
        date_opened:
          type: string
          format: date-time
          description: Date of opening timesheet
          example: "2002-10-02T15:00:00.05Z"
        duration:
          type: number
          description: Duration in hours

    NewTimesheet:
      allOf:
        - $ref: "#/components/schemas/ParentObjectId"
        - $ref: "#/components/schemas/BaseTimesheet"

    NewExpenditure:
      allOf:
        - $ref: "#/components/schemas/ParentObjectId"
        - $ref: "#/components/schemas/BaseExpenditure"

    ParentObjectId:
      type: object
      required:
        - parent_id
      properties:
        parent_id:
          $ref: "#/components/schemas/ObjectId"

    BaseExpenditure:
      type: object
      required:
        - name
        - date_opened
        - files
        - description
        - status
        - type
      properties:
        name:
          type: string
          example: 'Expenditure'
          maxLength: 100
        date_opened:
          type: string
          format: date-time
          description: Date of opening expenditure
          example: "2002-10-02T15:00:00.05Z"
        date_closed:
          type: string
          format: date
          description: Date of closing expenditure
          example: "2002-10-02T15:00:00.05Z"
        deadline:
          type: string
          format: date
          description: Deadline of the expenditure
          example: "2002-10-02T15:00:00.05Z"
        status:
          type: string
          enum:
            - submitted
            - approved
            - reimbudes
          description: Expenditure status
        type:
          type: string
          enum:
            - hosting
            - code
            - artwork
            - stock
            - photos
            - freelance
            - room
            - transport
            - other
        description:
          type: string
          description: Description of deliverable
        files:
          $ref: "#/components/schemas/Files"

    Money:
      type: object
      required:
        - currency
        - amount
      properties:
        currency:
          type: string
          description: Currency of the money
          enum:
            - CZK
            - EUR
            - USD
        amount:
          type: number
          description: Amount of the money

    Color:
      type: string
      pattern: "^#[0-9a-f]{6}$"
      example: "#343434"

    Project:
      allOf:
        - $ref: '#/components/schemas/ProjectIdObject'
        - $ref: '#/components/schemas/NewProject'

    Deliverable:
      allOf:
        - $ref: '#/components/schemas/ObjectIdObject'
        - $ref: '#/components/schemas/NewDeliverable'

    Issue:
      allOf:
        - $ref: '#/components/schemas/ObjectIdObject'
        - $ref: '#/components/schemas/NewIssue'

    Timesheet:
      allOf:
        - $ref: '#/components/schemas/SimpleId'
        - $ref: '#/components/schemas/BaseTimesheet'

    Expenditure:
      allOf:
        - $ref: '#/components/schemas/SimpleId'
        - $ref: '#/components/schemas/BaseExpenditure'

    DeliverableWithStats:
      allOf:
        - $ref: '#/components/schemas/ObjectIdObject'
        - $ref: '#/components/schemas/NewDeliverable'
        - $ref: '#/components/schemas/Stats'

    IssueWithStats:
      allOf:
        - $ref: '#/components/schemas/ObjectIdObject'
        - $ref: '#/components/schemas/NewIssue'
        - $ref: '#/components/schemas/Stats'

    ProjectId:
      type: string
      description: Project id in format "^[A-Z]{3,5}$"
      pattern: "^[A-Z]{3,5}$"

    ObjectId:
      type: string
      description: |
        Object id in format "^[A-Z]{3,5}-[0-9]{1,9}$"
      pattern: "^[A-Z]{3,5}-[0-9]{1,9}$"

    SimpleId:
      type: integer
      format: int32

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          enum:
            - project_does_not_exist
        message:
          type: string
          description: Human readable error message

  parameters:
    pathProjectId:
      in: path
      name: project_id
      description: Project id in format ^[A-Z]{3-5}$
      required: true
      schema:
        $ref: "#/components/schemas/ProjectId"
    pathDeliverableId:
      in: path
      name: deliverable_id
      description: Id of the deliverable ^[A-Z]{3-5}-[0-9]{1,9}$
      required: true
      schema:
        $ref: "#/components/schemas/ObjectId"
    pathIssueId:
      in: path
      name: issue_id
      description: Id of the issue ^[A-Z]{3-5}-[0-9]{1,9}$
      required: true
      schema:
        $ref: "#/components/schemas/ObjectId"
    pathTimesheetId:
      in: path
      name: timesheet_id
      description: Id of the timesheet
      required: true
      schema:
        $ref: "#/components/schemas/SimpleId"
    pathExpenditureId:
      in: path
      name: expenditure_id
      description: Id of the expenditure
      required: true
      schema:
        $ref: "#/components/schemas/SimpleId"
    pathObjectId:
      in: path
      name: object_id
      description: Id of the object
      required: true
      schema:
        $ref: "#/components/schemas/ObjectId"
    pathOtherObjectId:
      in: path
      name: other_object_id
      description: Id of the object
      required: true
      schema:
        $ref: "#/components/schemas/ObjectId"
    queryRelatedObjectId:
      in: query
      name: related_object_id
      description: Filter by related object id
      required: false
      schema:
        $ref: "#/components/schemas/ObjectId"
    queryObjectId:
      in: query
      name: object_id
      description: Filter by object
      required: true
      schema:
        $ref: "#/components/schemas/ObjectId"
    offset:
      in: query
      name: offset
      description: Offset of first returned object
      schema:
        type: integer
        default: 0
    limit:
      in: query
      name: limit
      description: Limit on number of returned objects
      schema:
        type: integer
        default: 10

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      x-basicInfoFunc: wt.auth.basic_auth
